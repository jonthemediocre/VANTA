"""
Auto-generates trigger registry documentation (docs/triggers.md) from trigger_registry.py
and performs basic validation.
"""
import sys
import os
import logging
import json # For formatting the match criteria nicely
import time
import utils # Import the new utility module

# Configure basic logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - DOCGEN - %(levelname)s - %(message)s')

# Define file paths relative to the script's expected execution location (project root)
# Trigger registry path is managed in utils
OUTPUT_DOC_PATH = "docs/triggers.md"

def format_match_criteria(criteria):
    """Formats the match dictionary into a code block for Markdown."""
    if not criteria:
        return "N/A"
    try:
        # Use json.dumps for consistent formatting, replace dict quotes
        formatted = json.dumps(criteria, indent=2)
        return f"`{formatted}`"
    except Exception:
        return f"`{str(criteria)}`" # Fallback

def format_contexts(contexts):
    """Formats the context list into a comma-separated string."""
    if not contexts:
        return "Global"
    return ", ".join(f"`{ctx}`" for ctx in contexts)

def generate_markdown_table(registry):
    """Generates the Markdown table content from the registry."""
    rows = []
    # Header
    header = "| ID | Type | Match Criteria | Protocol | Contexts | Module | Description |\n"
    separator = "|----|------|----------------|----------|----------|--------|-------------|\n"
    rows.append(header)
    rows.append(separator)

    # Data Rows
    for trigger in registry:
        trigger_id = trigger.get("id", "N/A")
        trigger_type = f"`{trigger.get("trigger_type", "N/A")}`"
        match_str = format_match_criteria(trigger.get("match"))
        protocol = f"`{trigger.get("protocol", "N/A")}`"
        contexts_str = format_contexts(trigger.get("contexts"))
        module = f"`{trigger.get("module", "N/A")}`"
        description = trigger.get("metadata", {}).get("description", "*") # Use * if no description
        description = description.replace("\n", " ").replace("|", "\|") # Sanitize description

        rows.append(f"| {trigger_id} | {trigger_type} | {match_str} | {protocol} | {contexts_str} | {module} | {description} |\n")
    
    return "".join(rows)

def update_documentation(registry):
    """Updates the docs/triggers.md file with the generated table."""
    logging.info(f"Generating documentation in {OUTPUT_DOC_PATH}...")
    
    # Ensure output directory exists
    output_dir = os.path.dirname(OUTPUT_DOC_PATH)
    if output_dir and not os.path.exists(output_dir):
        try:
            os.makedirs(output_dir)
            logging.info(f"Created directory: {output_dir}")
        except OSError as e:
            logging.error(f"Failed to create directory {output_dir}: {e}")
            return False

    markdown_table = generate_markdown_table(registry)
    
    header_content = """
# VANTA Protocol Triggers

> **Warning:** This file is auto-generated by `scripts/update_protocol_registry.py`.
> Do not edit manually! Changes should be made in `trigger_registry.py`.

This table lists all currently defined protocol triggers within the VANTA Kernel.

"""
    
    footer_content = """

_Last generated: {}_
""".format(time.strftime("%Y-%m-%d %H:%M:%S %Z"))

    full_content = header_content + markdown_table + footer_content

    try:
        with open(OUTPUT_DOC_PATH, "w", encoding='utf-8') as f:
            f.write(full_content)
        logging.info(f"Successfully updated {OUTPUT_DOC_PATH} with {len(registry)} triggers.")
        return True
    except IOError as e:
        logging.error(f"Failed to write documentation to {OUTPUT_DOC_PATH}: {e}")
        return False

if __name__ == "__main__":
    print("[Protocol Registry Update] Starting...")
    # Ensure we are running from the project root potentially
    # Or adjust OUTPUT_DOC_PATH accordingly
    
    # Use the utility function to load the registry
    registry_data = utils.load_trigger_registry()
    
    if registry_data is not None:
        if update_documentation(registry_data):
            print("[Protocol Registry Update] Documentation generated successfully.")
            sys.exit(0) # Success
        else:
            print("[Protocol Registry Update] Failed to write documentation.")
            sys.exit(1) # Failure
    else:
        print("[Protocol Registry Update] Failed to load trigger registry. Documentation not generated.")
        sys.exit(1) # Failure 