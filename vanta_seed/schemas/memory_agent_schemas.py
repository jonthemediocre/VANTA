from pydantic import BaseModel, Field
from typing import Dict, Any, Optional, List
from datetime import datetime
import uuid

from .base_schemas import BaseMemoryRecord

class ContextualData(BaseMemoryRecord):
    """Model for storing contextual data related to a user session and interactions."""
    context_id: uuid.UUID = Field(default_factory=uuid.uuid4, description="Unique identifier for this specific context data entry.")
    last_interaction: Optional[Dict[str, Any]] = Field(default=None, description="Summary of the last user message and agent response.")
    current_focus: Optional[str] = Field(default=None, description="Current focus of the interaction, e.g., 'coding', 'planning'.")
    active_tools: Optional[List[str]] = Field(default_factory=list, description="List of tools currently active or recently used in the session.")
    conversation_history_summary: Optional[str] = Field(default=None, description="A condensed summary of the ongoing conversation.")

class KnowledgeData(BaseMemoryRecord):
    """Model for storing learned insights, summaries, and other forms of knowledge."""
    knowledge_id: uuid.UUID = Field(default_factory=uuid.uuid4, description="Unique identifier for the knowledge item.")
    source_session_ids: Optional[List[uuid.UUID]] = Field(default=None, description="IDs of sessions that contributed to this knowledge. Now UUIDs.")
    type: str = Field(..., description="Categorization of the knowledge, e.g., 'code_pattern', 'user_preference'.")
    content: Dict[str, Any] = Field(..., description="The structured insight or summary content.")
    tags: Optional[List[str]] = Field(default_factory=list, description="Descriptive tags for findability.")
    relevance_score: Optional[float] = Field(default=None, description="A score indicating the relevance or importance.")
    last_accessed: Optional[datetime] = Field(default=None, description="Timestamp of when this knowledge was last accessed.")
    expires_at: Optional[datetime] = Field(default=None, description="Optional timestamp for when this knowledge becomes stale or expires.")
    locked: bool = Field(default=False, description="If True, prevents overwriting or automated modification.")
    revision: int = Field(default=1, description="Version number for tracking evolution of the knowledge item.")

class OperationalData(BaseMemoryRecord):
    """Model for storing data related to agent operations and task executions."""
    operational_id: uuid.UUID = Field(default_factory=uuid.uuid4, description="Unique identifier for the operation or task.")
    agent_id: str = Field(..., description="Identifier of the agent performing the operation.")
    task_type: str = Field(..., description="Type or category of the operation, e.g., 'data_fetch', 'api_call'.")
    status: str = Field(..., description="Current status of the operation (e.g., pending, running, completed, failed).")
    inputs: Optional[Dict[str, Any]] = Field(default=None, description="Inputs provided to the operation.")
    outputs: Optional[Dict[str, Any]] = Field(default=None, description="Outputs generated by the operation.")
    error: Optional[str] = Field(default=None, description="Error message if the operation failed.")
    attempts: int = Field(default=1, description="Number of attempts or retries for this operation (starts at 1).")
    tags: Optional[List[str]] = Field(default_factory=list, description="Optional tags for categorization or search.")
    started_at: Optional[datetime] = Field(default=None, description="Timestamp when the operation started.")
    completed_at: Optional[datetime] = Field(default=None, description="Timestamp when the operation completed.")
    expires_at: Optional[datetime] = Field(default=None, description="Optional timestamp for when the relevance of this operational data expires.")
    revision: int = Field(default=1, description="Version number for tracking evolution if the record is updated.")
    locked: bool = Field(default=False, description="If True, prevents automated deletion or mutation.") 