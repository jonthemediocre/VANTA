from dataclasses import dataclass, field
from typing import Optional, Dict, Any, Literal, List
import uuid
from datetime import datetime

@dataclass
class AgentInput:
    """Standard input structure for agent tasks, especially chat."""
    task: str  # The primary request or query string
    task_type: Optional[str] = None  # Type of task inferred (e.g., 'code_implementation', 'documentation')
    context: Dict[str, Any] = field(default_factory=dict)  # Contextual information (user state, file info, etc.)
    session_id: Optional[str] = None  # Identifier for the ongoing session or interaction
    payload: Optional[Dict[str, Any]] = None # Optional payload for specific tasks
    # --- MCP-Inspired Tool Response field --- 
    tool_responses: Optional[List[ToolResponse]] = None # Results from previous tool calls, if any
    # --------------------------------------
    # Add other common fields as needed

@dataclass
class AgentResponse:
    """Standard response structure from agent execution."""
    output: Optional[str] = None # Primary textual output, *optional* if making tool calls
    status: Literal['success', 'error', 'pending', 'tool_requested'] = 'success' # Added 'tool_requested' status
    error_message: Optional[str] = None  # Details if the status is 'error'
    context_updates: Optional[Dict[str, Any]] = None # Any updates to context agent wants to pass back
    memory_event: Optional[Dict[str, Any]] = None # Structured memory event generated by the agent (if any)
    # --- MCP-Inspired Tool Call field --- 
    tool_calls: Optional[List[ToolCall]] = None # List of tool calls requested by the agent
    # ------------------------------------
    # Add other common fields as needed

# Example of a more specific input if needed later
# @dataclass
# class ImageGenInput(AgentInput):
#     image_prompt: str
#     style_preference: Optional[str] = None
#     aspect_ratio: str = "1:1"

# Example of a more specific output if needed later
# @dataclass
# class ImageGenResponse(AgentResponse):
#     image_url: Optional[str] = None
#     generation_time_ms: Optional[int] = None 

# --- NEW: MCP-Inspired Tool Dataclasses --- 
@dataclass
class ToolCall:
    """Represents a request from an agent to call a specific tool."""
    id: str # Unique ID for this specific tool call request
    type: Literal["function"] = "function" # Type of tool, currently only function
    function: Dict[str, Any] # Describes the function to call
    # Example function dict: {"name": "memory_weave_lookup", "arguments": "{\"query\": \"user_prefs\"}"} 
    # Arguments are often JSON strings

@dataclass
class ToolResponse:
    """Represents the result of executing a tool call."""
    tool_call_id: str # The ID of the ToolCall this response corresponds to
    name: str # The name of the function that was called
    content: str # The result of the function call, typically as a string (e.g., JSON)
    status: Literal['success', 'error'] = 'success'
    error_message: Optional[str] = None
# ----------------------------------------- 

# --- NEW: A2A-Inspired Message Dataclass --- 
@dataclass
class AgentMessage:
    """Represents a message sent directly between agents."""
    message_id: str = field(default_factory=lambda: f"msg_{uuid.uuid4().hex[:8]}")
    sender_id: str
    receiver_id: str 
    intent: str # What is the purpose of the message (e.g., 'query', 'request_help', 'inform', 'negotiate')
    payload: Dict[str, Any] = field(default_factory=dict) # The actual content of the message
    timestamp: str = field(default_factory=lambda: datetime.utcnow().isoformat())
    # Optional fields for more complex interactions
    correlation_id: Optional[str] = None # To link related messages (e.g., request/response)
    requires_response: bool = False
# ------------------------------------------

# Example of a more specific input if needed later
# @dataclass
# class ImageGenInput(AgentInput):
#     image_prompt: str
#     style_preference: Optional[str] = None
#     aspect_ratio: str = "1:1"

# Example of a more specific output if needed later
# @dataclass
# class ImageGenResponse(AgentResponse):
#     image_url: Optional[str] = None
#     generation_time_ms: Optional[int] = None 